g<-g+geom_point(size=6, colour=black)
g<-g+xlab("Weight")+ylab("MPG")
g
g<-g+geom_point(size=6, colour="black")
g<-ggplot(mtcars, aes(x=wt, y=mpg, colour=cyl) )
g<-g+geom_point(size=6, colour="black")
g<-g+xlab("Weight")+ylab("MPG")
g
g<-ggplot(mtcars, aes(x=wt, y=mpg, fill=cyl) )
g<-g+geom_point(size=6, colour="black")
g<-g+xlab("Weight")+ylab("MPG")
g
summary(lm(mpg ~ wt + factor(cyl), mtcars))$coef
summary(lm(mpg ~ factor(cyl), mtcars))$coef
summary(lm(mpg ~ I(wt*factor(cyl)), mtcars))$coef
summary(lm(mpg ~ I(wt*(cyl==4)+I(wt*(cyl==8))), mtcars))$coef
lm(mpg ~ I(wt * 1) + factor(cyl), data = mtcars)
summary(lm(mpg ~ I(wt * 1) + factor(cyl), data = mtcars)_$coef
summary(lm(mpg ~ I(wt * 1) + factor(cyl), data = mtcars)$coef
)
summary(lm(mpg ~ I(wt * 1) + factor(cyl), data = mtcars))$coef
summary(lm(mpg ~ wt + I(factor(cyl)), data = mtcars))$coef
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars))$coef
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
plot(x,y)
?hatvalues
hatvalues(lm(y~x))
dfbeta(lm(y~x))
?dfbeta
summary(lm(mpg ~ I(wt) + factor(cyl), data = mtcars))$coef
summary(lm(mpg ~ wt + factor(cyl), data = mtcars))$coef
dfbeta(lm(y~x))
dfbetas(lm(y~x))
?I
swirl()
library(swirl)
swirl()
rgp1()
rgp2()
head(swiss)
md1<-lm(Fertility~.,swiss)
mdl<-lm(Fertility~.,swiss)
vif(mdl)
mdl2<-lm(Fertility~Agriculture+Education+Catholic+Infant.Mortality,swiss)
vif(mdl2)
x1c<-simbias()
apply(x1c, 1, mean)
fit1<-lm(Fertility~Agriculture,swiss)
fit3<-lm(Fertility~Agriculture+Examination+Education,swiss)
anova(fit1,fit3)
deviance(fit3)
d<-deviceance(fit3)/43
d<-deviance(fit3)/43
n<-deviance(fit1)/43
n<-(deviance(fit1)-deviance(fit3))/2
n/d
pf(n/d, 2, 43, lower.tail=FALSE)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
ravenData
mdl<-glm(ravenWinNum~ravenScore, family="binomial",data=ravenData)
lodds<-predict(mdl,data.frame(ravenScore=c(0,3,6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
confint(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
var(rpois(1000,50))
nxt()
head(hits)
class(hits[,'date'])
as.integer(head(hits[,'date']))
as.integer(head(hits[,'date']))
mdl<-glm(visits~date,poisson, hits)
summary(mdl)
exp(confint(mdl,'date'))
which.max(hits[,'visits'])
hits[704,]
lambda<-mdl$fitted.values[704]
qpois(.95, lambda)
mdl2<-glm(visits~date,poisson, hits, offset=log(visits+1))
mdl2<-glm(simplystats~date,poisson, hits, offset=log(visits+1))
qpois(.95,mdl2$fitted.values[704])
library(MASS)
glm(use~head,binomial,shuttle)
glm(use~wind,binomial,shuttle)
glm(use~wind+magn,binomial,shuttle)
glm(use~wind+factor(magn),binomial,shuttle)
glm(use~wind-magn,binomial,shuttle)
head(InsectSprays)
glm(count~spray,poisson,InsectSprays)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
spline(x,y)
plot(x,y)
plot(spline(x,y)
)
glm(count~factor(spray),poisson,InsectSprays)
glm(use~wind-magn,family="binomial",shuttle)
glm(use~wind-head,family="binomial",shuttle)
glm(use~head,family="binomial",shuttle)
glm(use~wind,family="binomial",shuttle)
glm(auto~wind,family="binomial",shuttle)
glm(factor(use)~wind,family="binomial",shuttle)
head(shuttle)
glm(factor(use)~
wind,family="binomial",shuttle)
exp(0.03181)
exp(-0.03181)
glm(factor(use)~
wind+magn,family="binomial",shuttle)
exp(-0.03201)
exp(-0.056)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(datasets)
summary(mtcars)
head(mtcars)
head(mtcars)
View(mtcars)
g<-ggplot(mtcars, aes(x=wt, y=mpg, fill=cyl) )
g<-g+geom_point(size=6, colour="black")
g<-g+xlab("Weight")+ylab("MPG")
g
g<-ggplot(mtcars, aes(x=wt, y=mpg, fill=wt) )
g<-g+geom_point(size=6, colour="black")
g<-g+xlab("Weight")+ylab("MPG")
g
g<-ggplot(mtcars, aes(x=wt, y=mpg, fill=wt) )
g<-g+geom_point(size=6)
g<-g+xlab("Weight")+ylab("MPG")
g
g<-ggplot(mtcars, aes(x=wt, y=mpg, fill=am) )
g<-g+geom_point(size=6)
g<-g+xlab("Weight")+ylab("MPG")
g
g<-ggplot(mtcars, aes(x=wt, y=mpg, fill=factor(am))
g<-g+geom_point(size=6)
g<-g+xlab("Weight")+ylab("MPG")
g
g<-ggplot(mtcars, aes(x=wt, y=mpg, fill=am)
g<-g+geom_point(size=6)
g<-g+xlab("Weight")+ylab("MPG")
g
g<-ggplot(mtcars, aes(x=wt, y=mpg, fill=am))
g<-g+geom_point(size=6)
g<-g+xlab("Weight")+ylab("MPG")
g
g<-ggplot(mtcars, aes(x=wt, y=mpg, fill=am))
g<-g+geom_point()
g<-g+xlab("Weight")+ylab("MPG")
g
g<-ggplot(mtcars)
g<-g+geom_point(aes(x=wt, y=mpg, fill=am))
g<-g+xlab("Weight")+ylab("MPG")
g
g<-ggplot(mtcars)
g<-g+geom_point(aes(x=wt, y=mpg, fill=am), size=4)
g<-g+xlab("Weight")+ylab("MPG")
g
g<-ggplot(mtcars)
g<-g+geom_point(aes(x=wt, y=mpg, colour=am), size=4)
g<-g+xlab("Weight")+ylab("MPG")
g
g<-ggplot(mtcars, aes(x=wt, y=mpg, colour=am))
g<-g+geom_point(size=4)
g<-g+xlab("Weight")+ylab("MPG")
g
?mtcars
mtcars$Transmission<-ifelse(mtcars$am==0,"Automatic","Manual")
g<-ggplot(mtcars, aes(x=wt, y=mpg, colour=Transmission))
g<-g+geom_point(size=4)
g<-g+xlab("Weight")+ylab("MPG")
g
mtcars[,mtcars$Transmission=='Manual']
mtcars$Transmission=='Manual'
mtcars[mtcars$Transmission=='Manual']
mtcars[mtcars$Transmission=='Manual',]
manual<-lm(mpg~wt,mtcars[mtcars$Transmission=='Manual',])
automatic<-lm(mpg~wt,mtcars[mtcars$Transmission=='Automatic',])
mtcars$Transmission<-ifelse(mtcars$am==0,"Automatic","Manual")
g<-ggplot(mtcars, aes(x=wt, y=mpg, colour=Transmission))
g<-g+geom_point(size=4)
g<-g+geom_abline(manual)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(datasets)
library(MASS)
fit <- lm(mpg~.,data=mtcars)
step <- stepAIC(fit, direction="both")
step$anova # display results
vif
fit <- lm(mpg~.,data=mtcars)
vif(fit)
mtcars
library(datasets)
fit <- lm(mpg~.,data=mtcars)
vif(fit)
mtcars
fit<-lm(mpg~cyl+disp+hp+drat+wt+qsec+vs+gear+am+carb)
fit<-lm(mpg~cyl+disp+hp+drat+wt+qsec+vs+gear+am+carb,mtcars)
vif(fit)
?vif
influence(fit)
?mtcars
?stepAIC
?mtcars
?pairs
library(leaps)
install.packages("leaps")
library(leaps)
setwd("~/Data Science")
Dump_EUS_answers <- read.csv("~/Data Science/Dump_EUS_answers.csv", sep=";")
View(Dump_EUS_answers)
?dcast
??dcast
?t
data(infert, package = "datasets")
CrossTable(infert$education, infert$induced, expected = TRUE)
CrossTable(infert$education, infert$induced, expected = TRUE, format="SAS")
CrossTable(infert$education, infert$induced, expected = TRUE, format="SPSS")
CrossTable(warpbreaks$wool, warpbreaks$tension, dnn = c("Wool", "Tension"))
??CrossTable
library(CrossTable)
library(xtabs)
install.packages("xtabs")
library(gmodels)
install.packages("gmodels")
library(gmodels)
data(infert, package = "datasets")
CrossTable(infert$education, infert$induced, expected = TRUE)
CrossTable(infert$education, infert$induced, expected = TRUE, format="SAS")
CrossTable(infert$education, infert$induced, expected = TRUE, format="SPSS")
CrossTable(warpbreaks$wool, warpbreaks$tension, dnn = c("Wool", "Tension"))
View(infert)
?transform
## See for non-sparse examples:
example(xtabs, package = "stats")
## similar to "nlme"s  'ergoStool' :
d.ergo <- data.frame(Type = paste("T", rep(1:4, 9*4), sep=""),
Subj = gl(9,4, 36*4))
xtabs(~ Type + Subj, data=d.ergo) # 4 replicates each
set.seed(15) # a subset of cases:
xtabs(~ Type + Subj, data=d.ergo[sample(36, 10),], sparse=TRUE)
## Hypothetical two level setup:
inner <- factor(sample(letters[1:25], 100, replace = TRUE))
inout <- factor(sample(LETTERS[1:5], 25, replace = TRUE))
fr <- data.frame(inner = inner, outer = inout[as.integer(inner)])
xtabs(~ inner + outer, fr, sparse = TRUE)
Dump_EUS_answers <- read.csv("~/Data Science/Dump_EUS_answers.csv", sep=";")
View(Dump_EUS_answers)
crosstab<-xtabs(Answer~Question,data=Dump_EUS>answers)
crosstab<-xtabs(Answer~Question,data=Dump_EUS_answers)
?xtabs
library(readxl)
Crosstable_answers <- read_excel("D:/OneDrive/Documenten/Crosstable_answers.xlsx")
View(Crosstable_answers)
modRpart<-train("Desktop PC Quality"~.,data=Crosstable_answers,method="rpart")
library(caret)
modRpart<-train("Desktop PC Quality"~.,data=Crosstable_answers,method="rpart")
modRpart<-train([Desktop PC Quality]~.,data=Crosstable_answers,method="rpart")
modRpart<-train('Desktop PC Quality'~.,data=Crosstable_answers,method="rpart")
modRpart<-train(`Desktop PC quality`~.,data=Crosstable_answers,method="rpart")
modRpart<-train(`Desktop PC quality`~.,data=Crosstable_answers,method="rpart",na.action=na.exclude)
modRpart<-train(`Desktop PC quality`~.,data=Crosstable_answers[,colSums(is.na(Crosstable_answers) | Crosstable_answers=="") == 0],method="rpart",na.action=na.exclude)
modRpart<-train(`Desktop PC quality`~.,data=Crosstable_answers[,-is.na(Crosstable_answers$`Desktop PC quality`)],method="rpart",na.action=na.exclude)
PCQ<-Crosstable_answers[,-is.na(Crosstable_answers$`Desktop PC quality`)]
dim(PCQ)
PCQ<-Crosstable_answers[-is.na(Crosstable_answers$`Desktop PC quality`),]
dim(PCQ)
is.na(Crosstable_answers$`Desktop PC quality`)
Crosstable_answers[-is.na(Crosstable_answers$`Desktop PC quality`)]
PCQ<-Crosstable_answers[-is.na(Crosstable_answers$`Desktop PC quality`)]
dim(PCQ)
PCQ
View(PCQ)
?subset
library(dplyr)
?subset
PCQ<-subset(Crosstable_answers,Crosstable_answers$`Desktop PC quality`!="NA")
modRpart<-train(`Desktop PC quality`~.,data=PCQ,method="rpart",na.action=na.exclude)
?na.action
modRpart<-train(`Desktop PC quality`~.,data=PCQ,method="rpart",na.action=na.omit)
modRpart<-train(`Desktop PC quality`~.,data=PCQ,method="rpart",na.action=na.pass)
str(PCQ)
PCQ<-PCQ[1:31] <- lapply(PCQ[1:31], as.factor)
str(PCQ)
modRpart<-train(`Desktop PC quality`~.,data=PCQ,method="rpart",na.action=na.pass)
PCQ2<-PCQ[,-c(1,12,30)]
PCQ2<-PCQ[,-30]
dim(PCQ2)
dim(PCQ)
View(PCQ)
PCQ<-data.frame(PCQ)
PCQ2<-PCQ[,-c(1,12,30)]
modRpart<-train(`Desktop PC quality`~.,data=PCQ2,method="rpart",na.action=na.pass)
View(PCQ2)
modRpart<-train(Desktop.PC.quality~.,data=PCQ2,method="rpart",na.action=na.pass)
print(modRpart)
View(modRpart)
print(modRpart$finalModel)
library(rattle)
fancyRpartPlot(modRpart)
fancyRpartPlot(modRpart$finalModel)
library(readxl)
Crosstable_answers_cijfers <- read_excel("D:/OneDrive/Documenten/Crosstable_answers_cijfers.xlsx",
col_types = c("blank", "blank", "text",
"text", "text", "text", "text", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric"))
View(Crosstable_answers_cijfers)
PCQ<-subset(Crosstable_answers_cijfers,Crosstable_answers_cijfers$`Desktop PC quality`!="NA")
str(PCQ)
PCQ<-PCQ[1:5] <- lapply(PCQ[1:5], as.factor)
PCQ<-data.frame(PCQ)
str(PCQ)
PCQ<-subset(Crosstable_answers_cijfers,Crosstable_answers_cijfers$`Desktop PC quality`!="NA")
PCQ<- lapply(PCQ[1:5], as.factor)
str(PCQ)
PCQ<-subset(Crosstable_answers_cijfers,Crosstable_answers_cijfers$`Desktop PC quality`!="NA")
PCQ[1:5]<-lapply(PCQ[1:5], as.factor)
str(PCQ)
modRpart<-train(Desktop.PC.quality~.,data=PCQ,method="rpart",na.action=na.pass)
PCQ<-data.frame(PCQ)
modRpart<-train(Desktop.PC.quality~.,data=PCQ,method="rpart",na.action=na.pass)
fancyRpartPlot(modRpart$finalModel)
install.packages("corrplot")
library(corrplot)
corrplot(PCQ)
dim(PCQ)
corrplot(PCQ[,5:30])
corrplot(PCQ[,6:30])
corrplot(PCQ[,6:30], type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
corrplot(PCQ[,6:30], type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45,na.action=na.omit)
corrplot(PCQ[,c(6:30)], type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45,na.action=na.omit)
corrplot(PCQ[,c(6:30)])
corrplot(PCQ[,c(6:30)],na.action=na.exclude
)
install.packages("PerformanceAnalytics")
library(PerformanceAnalytics)
chart.correlation(PCQ[,c(6:30)])
chart.Correlation(PCQ[,c(6:30)])
chart.Correlation(PCQ[,c(6:30)],xlim=10,ylim=10)
?chart.Correlation
chart.Correlation(PCQ[,c(6:30)],histogram=TRUE,pch=19,xlim=10)
PCQ2<-PCQ[,c(6:30)]
str(PCQ2)
PCQ2<-PCQ2[,-c(5,6,23)]
chart.Correlation(PCQ2,histogram=TRUE,pch=19)
chart.Correlation(PCQ2[,c(1,4,7)],histogram=TRUE,pch=19)
str(PCQ2)
chart.Correlation(PCQ2[,c(1,4,5,7,8,9,10,11,12,13,14,15)],histogram=TRUE,pch=19)
chart.Correlation(PCQ2[,c(1,4,5,8,9,10,11,12,13,14,15)],histogram=TRUE,pch=19)
chart.Correlation(PCQ2[,c(1,4,5)],histogram=TRUE,pch=19)
chart.Correlation(PCQ2[,c(1,4,5,7)],histogram=TRUE,pch=19)
chart.Correlation(PCQ2[,c(1,4,5,7,8)],histogram=TRUE,pch=19)
chart.Correlation(PCQ2[,c(1,4,5,7,9,10,11,12,13,14,15)],histogram=TRUE,pch=19)
chart.Correlation(PCQ2[,c(4,1,5,7,9,10,11,12,13,14,15)],histogram=TRUE,pch=19)
chart.Correlation(PCQ2[,c(4,1,7,9,10,13,14)],histogram=TRUE,pch=19)
chart.Correlation(PCQ2[,c(4,7,9,10,13,14,16)],histogram=TRUE,pch=19)
chart.Correlation(PCQ2[,c(4,7,9,10,13,14,17)],histogram=TRUE,pch=19)
chart.Correlation(PCQ2[,c(4,7,9,10,13,14,17,18)],histogram=TRUE,pch=19)
chart.Correlation(PCQ2[,c(4,7,9,10,13,14,17,19)],histogram=TRUE,pch=19)
chart.Correlation(PCQ2[,c(4,7,9,10,13,14,17,20)],histogram=TRUE,pch=19)
chart.Correlation(PCQ2[,c(4,7,9,10,13,14,17,21)],histogram=TRUE,pch=19)
chart.Correlation(PCQ2[,c(4,7,9,10,13,14,17,22)],histogram=TRUE,pch=19)
chart.Correlation(PCQ2[,c(4,7,9,10,13,14,17,23)],histogram=TRUE,pch=19)
chart.Correlation(PCQ2[,c(4,7,9,10,13,14,17,24)],histogram=TRUE,pch=19)
chart.Correlation(PCQ2[,c(4,7,9,10,13,14,17)],histogram=TRUE,pch=19)
corrplot(PCQ2[,c(4,7,9,10,13,14,17))
corrplot(PCQ2[,c(4,7,9,10,13,14,17)
)
corrplot(PCQ2[,c(4,7,9,10,13,14,17),type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
corrplot(PCQ2[,c(4,7,9,10,13,14,17)],type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
corrplot(PCQ2[,c(4,7,9,10,13,14,17)],type = "upper", order = "hclust",
tl.col = "black")
corrplot(cor(PCQ2[,c(4,7,9,10,13,14,17)]),type = "upper", order = "hclust",
tl.col = "black")
cor(PCQ2[,c(4,7,9,10,13,14,17)])
?cor
cor(PCQ2[,c(4,7,9,10,13,14,17)],na.rm=TRUE)
cor(PCQ2[,c(4,7)],na.rm=TRUE)
cor(PCQ2[,c(4,7)])
install.packages("leaflet")
library(readxl)
AAS_coordinates <- read_excel("Developing Data Products/AAS_coordinates.xlsx")
View(AAS_coordinates)
setwd("~/Data Science")
install.packages(c("AppliedPredictiveModeling", "caret", "CVST", "data.table", "dplyr", "htmlTable", "packrat", "pillar", "purrr", "Rcpp", "rlang", "rpart.plot", "stringi", "stringr", "tidyr", "utf8", "yaml"))
remove.packages("webshot")
remove.packages("plotly")
install.packages("plotly")
install.packages("webshot")
plot_ly(mtcars,x = mtcars$wt, y = mtcars$qsec,mode="markers" ,color=mtcars$hp, size = mtcars$cyl)
library(plotly)
plot_ly(mtcars,x = mtcars$wt, y = mtcars$qsec,mode="markers" ,color=mtcars$hp, size = mtcars$cyl)
# Chunk 1
library(plotly)
str(mtcars)
# Chunk 2
plot_ly(mtcars,x = mtcars$wt, y = mtcars$qsec,mode="markers" ,color=mtcars$hp, size = mtcars$cyl)
names(mtcars)
names(mtcars)[1]="name"
names(mtcars)
install.packages("slidify")
install.packages("C:/Users/ddhub/Downloads/slidify_0.3.1.zip", repos = NULL, type = "win.binary")
install_github("slidifyLibraries","ramnathv")
??install_github
??install_from_github
library(devtools)
install.packages("devtools")
install_github("slidifyLibraries","ramnathv")
library(devtools)
install_github("slidify","ramnathv")
?install_github
install_github("ramnathv/slidify")
install_github("ramnathv/slidifyLibraries")
library(slidify)
author('Daniël Hubbeling')
shiny::runApp('~/Data Science/Developing Data Products/Week4')
runApp('~/Data Science/Developing Data Products/Week4')
# get the data to start with and add a label for transmission for easier reading
cardata<-mtcars
cardata$Transmission<-ifelse(cardata$am==0,"Automatic","Manual")
# plot mpg~weight
g<-ggplot(cardata, aes(x=wt, y=mpg))
g<-g+geom_point(size=4)
g<-g+xlab("Weight (x1000 lbs)")+ylab("MPG (miles/gallon)")
g<-g+geom_smooth(method="lm", se=FALSE)
g
g<-ggplot(cardata, aes(x=qsec, y=mpg))
g<-g+geom_point(size=4)
g<-g+xlab("1/4 mile time (s)")+ylab("MPG (miles/gallon)")
g<-g+geom_smooth(method="lm", se=TRUE)
g
# plot mpg~weight
g<-ggplot(cardata, aes(x=wt, y=mpg))
g<-g+geom_point(size=4)
g<-g+xlab("Weight (x1000 lbs)")+ylab("MPG (miles/gallon)")
g
cardata
mtcars
library(datasets)
mtcars
runApp('~/Data Science/Developing Data Products/Week4')
runApp('~/Data Science/Developing Data Products/Week4')
?checkboxGroupInput
runApp('~/Data Science/Developing Data Products/Week4')
runApp('~/Data Science/Developing Data Products/Week4')
runApp('~/Data Science/Developing Data Products/Week4')
runApp('~/Data Science/Developing Data Products/Week4')
runApp('~/Data Science/Developing Data Products/Week4')
runApp('~/Data Science/Developing Data Products/Week4')
runApp('~/Data Science/Developing Data Products/Week4')
runApp('~/Data Science/Developing Data Products/Week4')
runApp('~/Data Science/Developing Data Products/Week4')
runApp('~/Data Science/Developing Data Products/Week4')
runApp('~/Data Science/Developing Data Products/Week4')
?mutate
runApp('~/Data Science/Developing Data Products/Week4')
runApp('~/Data Science/Developing Data Products/Week4')
runApp('~/Data Science/Developing Data Products/Week4')
runApp('~/Data Science/Developing Data Products/Week4')
?arrange
runApp('~/Data Science/Developing Data Products/Week4')
runApp('~/Data Science/Developing Data Products/Week4')
runApp('~/Data Science/Developing Data Products/Week4')
library(ggplot2)
library(plotly)
library(datasets)
library(MASS)
cardata<-mtcars
# add a label for transmission for easier reading
cardata$Transmission<-ifelse(cardata$am==0,"Automatic","Manual")
# plot mpg~weight
g<-ggplot(cardata, aes(x=wt, y=mpg, colour=Transmission))
g<-g+geom_point(size=4)
g<-g+xlab("Weight (x1000 lbs)")+ylab("MPG (miles/gallon)")
g<-g+geom_smooth(method="lm", se=FALSE)
g
runApp('~/Data Science/Developing Data Products/Week4')
runApp('~/Data Science/Developing Data Products/Week4')
runApp('~/Data Science/Developing Data Products/Week4')
?plot_ly
runApp('~/Data Science/Developing Data Products/Week4')
runApp('~/Data Science/Developing Data Products/Week4')
runApp('~/Data Science/Developing Data Products/Week4')
runApp('~/Data Science/Developing Data Products/Week4')
runApp('~/Data Science/Developing Data Products/Week4')
runApp('~/Data Science/Developing Data Products/Week4')
runApp('~/Data Science/Developing Data Products/Week4')
runApp('~/Data Science/Developing Data Products/Week4')
runApp('~/Data Science/Developing Data Products/Week4')
install.packages("rsconnect")
install.packages("rsconnect")
rsconnect::setAccountInfo(name='primusdd', token='8F71301263636F29984B888AB4C81DF4', secret='/jfra/GecKQjh1UetBdcwxxCuBSMfle9KVUqBSk2')
shiny::runApp('~/Data Science/Developing Data Products/Week4')
runApp('~/Data Science/Developing Data Products/Week4')
